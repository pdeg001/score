using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var welcome = Welcome.FromJson(jsonString);

    namespace QuickType
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class Welcome
        {
            [JsonProperty("showPromote")]
            public ShowPromote ShowPromote { get; set; }

            [JsonProperty("digitalFont")]
            public DigitalFont DigitalFont { get; set; }

            [JsonProperty("fontColor")]
            public FontColor FontColor { get; set; }

            [JsonProperty("lightSchema")]
            public LightSchema LightSchema { get; set; }

            [JsonProperty("message")]
            public Message Message { get; set; }

            [JsonProperty("reclame")]
            public DigitalFont Reclame { get; set; }
        }

        public partial class DigitalFont
        {
            [JsonProperty("active")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Active { get; set; }
        }

        public partial class FontColor
        {
            [JsonProperty("colorYellow")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long ColorYellow { get; set; }
        }

        public partial class LightSchema
        {
            [JsonProperty("useLightSchema")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long UseLightSchema { get; set; }
        }

        public partial class Message
        {
            [JsonProperty("line_1")]
            public string Line1 { get; set; }

            [JsonProperty("line_2")]
            public string Line2 { get; set; }

            [JsonProperty("line_3")]
            public string Line3 { get; set; }

            [JsonProperty("line_4")]
            public string Line4 { get; set; }

            [JsonProperty("line_5")]
            public string Line5 { get; set; }
        }

        public partial class ShowPromote
        {
            [JsonProperty("active")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Active { get; set; }

            [JsonProperty("timeOut")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long TimeOut { get; set; }
        }

        public partial class Welcome
        {
            public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, QuickType.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
    }




